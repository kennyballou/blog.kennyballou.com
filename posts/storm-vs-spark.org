#+TITLE: Apache Storm and Apache Spark Streaming
#+DESCRIPTION: Comparison of Apache Storm and Apache Spark Streaming
#+TAGS: Apache Storm
#+TAGS: Apache Spark
#+TAGS: Apache
#+TAGS: Real-time Streaming
#+TAGS: zData Inc.
#+DATE: 2014-09-08
#+SLUG: apache-storm-and-apache-spark
#+LINK: storm https://storm.apache.org/
#+LINK: spark https://spark.apache.org/
#+LINK: storm-post https://kennyballou.com/blog/2014/07/real-time-streaming-storm-and-kafka
#+LINK: spark-post https://kennyballou.com/blog/2014/08/real-time-streaming-apache-spark-streaming
#+LINK: kafka https://kafka.apache.org/
#+LINK: wiki-data-parallelism http://en.wikipedia.org/wiki/Data_parallelism
#+LINK: wiki-task-parallelism http://en.wikipedia.org/wiki/Task_parallelism
#+LINK: zookeeper https://zookeeper.apache.org/
#+LINK: storm-yarn https://github.com/yahoo/storm-yarn
#+LINK: horton-storm-yarn http://hortonworks.com/kb/storm-on-yarn-install-on-hdp2-beta-cluster/
#+LINK: mesos https://mesos.apache.org
#+LINK: mesos-run-storm https://mesosphere.io/learn/run-storm-on-mesos/
#+LINK: marathon https://github.com/mesosphere/marathon
#+LINK: aws-s3 http://aws.amazon.com/s3/
#+LINK: wiki-nfs http://en.wikipedia.org/wiki/Network_File_System
#+LINK: hdfs-user-guide http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html
#+LINK: storm-jira-issues https://issues.apache.org/jira/browse/STORM/
#+LINK: spark-jira-issues https://issues.apache.org/jira/browse/SPARK/
#+LINK: scala http://www.scala-lang.org/
#+LINK: clojure http://clojure.org/
#+LINK: wiki-lisp http://en.wikipedia.org/wiki/Lisp_(programming_language)
#+LINK: jzmq https://github.com/zeromq/jzmq
#+LINK: zeromq http://zeromq.org/
#+LINK: netty http://netty.io/
#+LINK: yahoo-storm-netty http://yahooeng.tumblr.com/post/64758709722/making-storm-fly-with-netty
#+LINK: akka http://akka.io
#+LINK: apache http://www.apache.org/
#+LINK: supervisord http://supervisord.org
#+LINK: xinhstechblog-storm-spark http://xinhstechblog.blogspot.com/2014/06/storm-vs-spark-streaming-side-by-side.html
#+LINK: ptgoetz-storm-spark http://www.slideshare.net/ptgoetz/apache-storm-vs-spark-streaming
#+LINK: wiki-batch-processing http://en.wikipedia.org/wiki/Batch_processing
#+LINK: wiki-event-processing http://en.wikipedia.org/wiki/Event_stream_processing
#+LINK: storm-trident-overview https://storm.incubator.apache.org/documentation/Trident-API-Overview.html
#+LINK: storm-powered-by http://storm.incubator.apache.org/documentation/Powered-By.html
#+LINK: wiki-process-supervision http://en.wikipedia.org/wiki/Process_supervision
#+LINK: wiki-etl http://en.wikipedia.org/wiki/Extract,_transform,_load
#+LINK: wiki-sql-window-function http://en.wikipedia.org/wiki/Window_function_(SQL)#Window_function
#+LINK: git-stat-gist https://gist.github.com/kennyballou/c6ff37e5eef6710794a6
#+LINK: github https://github.com/
#+LINK: spark-commit-activity https://github.com/apache/spark/graphs/commit-activity
#+LINK: storm-commit-activity https://github.com/apache/incubator-storm/graphs/commit-activity
#+LINK: github-storm-contributors https://github.com/apache/incubator-storm/graphs/contributors
#+LINK: spark-github https://github.com/apache/spark

#+BEGIN_PREVIEW
This is the last post in the series on real-time systems.  In the
[[storm-post][first post]] we discussed [[storm][Apache Storm]] and
[[kafka][Apache Kafka]].  In the [[spark-post][second post]] we discussed
[[spark][Apache Spark (Streaming)]].  In both posts we examined a small Twitter
Sentiment Analysis program.  Today, we will be reviewing both systems: how they
compare and how they contrast.
#+END_PREVIEW

The intention is not to cast judgment over one project or the other, but rather
to exposit the differences and similarities.  Any judgments made, subtle or
not, are mistakes in exposition and/or organization and are not actual
endorsements of either project.

** Apache Storm
:PROPERTIES:
:ID:       aed72b1a-938b-40fd-8775-aca54e8aebe0
:END:

"Storm is a distributed real-time computation system" [[storm][Storm]].  Apache
Storm is a [[wiki-task-parallelism][task parallel]] continuous computational
engine.  It defines its workflows in Directed Acyclic Graphs (DAG's) called
"topologies".  These topologies run until shutdown by the user or encountering
an unrecoverable failure.

Storm does not natively run on top of typical Hadoop clusters, it uses
[[zookeeper][Apache ZooKeeper]] and its own master/minion worker processes to
coordinate topologies, master and worker state, and the message guarantee
semantics.  That said, both [[storm-yarn][Yahoo!]] and
[[horton-storm-yarn][Hortonworks]] are working on providing libraries for
running Storm topologies on top of Hadoop 2.x YARN clusters.  Furthermore,
Storm can run on top of the [[mesos][Mesos]] scheduler as well,
[[mesos-run-storm][natively]] and with help from the [[marathon][Marathon]]
framework.

Regardless though, Storm can certainly still consume files from HDFS and/or
write files to HDFS.

** Apache Spark (Streaming)
:PROPERTIES:
:ID:       51edc096-65ff-4b69-b98b-7846b2ea540c
:END:

"Apache Spark is a fast and general purpose engine for large-scale data
processing" [[spark][Spark]].  [[spark][Apache Spark]] is a
[[wiki-data-parallelism][data parallel]] general purpose batch processing
engine.  Workflows are defined in a similar and reminiscent style of MapReduce,
however, is much more capable than traditional Hadoop MapReduce.  Apache Spark
has its Streaming API project that allows for continuous processing via short
interval batches.  Similar to Storm, Spark Streaming jobs run until shutdown by
the user or encounter an unrecoverable failure.

Apache Spark does not itself require Hadoop to operate.  However, its data
parallel paradigm requires a shared filesystem for optimal use of stable data.
The stable source can range from [[aws-s3][S3]], [[wiki-nfs][NFS]], or, more
typically, [[hdfs-user-guide][HDFS]].

Executing Spark applications does not /require/ Hadoop YARN.  Spark has its own
standalone master/server processes.  However, it is common to run Spark
applications using YARN containers.  Furthermore, Spark can also run on Mesos
clusters.

** Development
:PROPERTIES:
:ID:       4a6e00ea-274d-4033-a500-71b54685fe39
:END:

As of this writing, Apache Spark is a full, top level Apache project.  Whereas
Apache Storm is currently undergoing incubation.  Moreover, the latest stable
version of Apache Storm is =0.9.2= and the latest stable version of Apache
Spark is =1.0.2= (with =1.1.0= to be released in the coming weeks).  Of course,
as the Apache Incubation reminder states, this does not strictly reflect
stability or completeness of either project.  It is, however, a reflection to
the state of the communities.  Apache Spark operations and its process are
endorsed by the [[apache][Apache Software Foundation]].  Apache Storm is
working on stabilizing its community and development process.

Spark's =1.x= version does state that the API has stabilized and will not be
doing major changes undermining backward compatibility.  Implicitly, Storm has
no guaranteed stability in its API, however, it is [[storm-powered-by][running
in production for many different companies]].

*** Implementation Language
:PROPERTIES:
:ID:       72dd2af0-ba58-491c-bb90-921c19cbc403
:END:

Both [[spark][Apache Spark]] and [[storm][Apache Storm]] are implemented in JVM
based languages: [[scala][Scala]] and [[clojure][Clojure]], respectively.

Scala is a functional meets object-oriented language.  In other words, the
language carries ideas from both the functional world and the object-oriented
world.  This yields an interesting mix of code reusability, extensibility, and
higher-order functions.

Clojure is a dialect of [[wiki-lisp][Lisp]] targeting the JVM providing the
Lisp philosophy: code-as-data and providing the rich macro system typical of
Lisp languages.  Clojure is predominately functional in nature, however, if
state or side-effects are required, they are facilitated with a transactional
memory model, aiding in making multi-threaded based applications consistent and
safe.

**** Message Passing Layer
:PROPERTIES:
:ID:       7b5913d9-2e1e-4749-9744-dd9741734863
:END:

Until version =0.9.x=, Storm was using the Java library [[jzmq][JZMQ]] for
[[zeromq][ZeroMQ]] messages.  However, Storm has since moved the default
messaging layer to [[netty][Netty]] with efforts from
[[yahoo-storm-netty][Yahoo!]].  Although Netty is now being used by default,
users can still use ZeroMQ, if desired, since the migration to Netty was
intended to also make the message layer pluggable.

Spark, on the other hand, uses a combination of [[netty][Netty]] and
[[akka][Akka]] for distributing messages throughout the executors.

*** Commit Velocity
:PROPERTIES:
:ID:       8a375dcc-c663-4ce2-83dc-1c4e367d11b0
:END:

As a reminder, these data are included not to cast judgment on one project or
the other, but rather to exposit the fluidness of each project.  The continuum
of the dynamics of both projects can be used as an argument for or against,
depending on application requirements.  If rigid stability is a strong
requirement, arguing for a slower commit velocity may be appropriate.

Source of the following statistics were taken from the graphs at
[[github][GitHub]] and computed from [[git-stat-gist][this script]].

**** Spark Commit Velocity
:PROPERTIES:
:ID:       cd67cad7-2fa7-4c2f-8860-c3497701d2a6
:END:

Examining the graphs from [[spark-commit-activity][GitHub]], over the last
month (as of this writing), there have been over 330 commits.  The previous
month had about 340.

**** Storm Commit Velocity
:PROPERTIES:
:ID:       a4318c71-4c78-4997-8b0f-4a2f5906e9f3
:END:

Again examining the commit graphs from [[storm-commit-activity][GitHub]], over
the last month (as of this writing), there have been over 70 commits.  The
month prior had over 130.

*** Issue Velocity
:PROPERTIES:
:ID:       7bfb9ac0-1cdb-4499-860b-2be6beb30f43
:END:

Sourcing the summary charts from JIRA, we can see that clearly Spark has a huge
volume of issues reported and closed in the last 30 days.  Storm, roughly, an
order of magnitude less.

Spark Open and Closed JIRA Issues (last 30 days):

#+ATTR_HTML: :align center
#+BEGIN_figure
#+NAME: fig: spark-issues-chart
[[file:/media/spark_issues_chart.png]]
#+END_figure

Storm Open and Closed JIRA Issues (last 30 days):

#+ATTR_HTML: :align center
#+BEGIN_figure
#+NAME: fig: storm-issues-chart
[[file:/media/storm_issues_chart.png]]
#+END_figure

*** Contributor/ Community Size
:PROPERTIES:
:ID:       ed5f3573-8ade-4d6a-b9f1-38c045ed40d7
:END:

**** Storm Contributor Size
:PROPERTIES:
:ID:       768d2f75-4521-472c-b07d-6ddcf68a39ec
:END:

Sourcing the reports from [[github-storm-contributors][GitHub]], Storm has over
a 100 contributors.  This number, though, is just the unique number of people
who have committed at least one patch.

Over the last 60 days, Storm has seen 34 unique contributors and 16 over the
last 30.

**** Spark Contributor Size
:PROPERTIES:
:ID:       381c7658-6c09-42ed-8eec-9b7ab13d9171
:END:

Similarly sourcing the reports from [[spark-github][GitHub]], Spark has roughly
280 contributors.  A similar note as before must be made about this number:
this is the number of at least one patch contributors to the project.

Apache Spark has had over 140 contributors over the last 60 days and 94 over
the last 30 days.

** Development Friendliness
:PROPERTIES:
:ID:       08715824-3f84-4f8d-894c-c84d1854a262
:END:

*** Developing for Storm
:PROPERTIES:
:ID:       fcfe88f0-6e2e-4380-a7af-11ac7bae7098
:END:

- Describing the process structure with DAG's feels natural to the
  [[wiki-task-parallelism][processing model]].  Each node in the graph will
  transform the data in a certain way, and the process continues, possibly
  disjointly.

- Storm tuples, the data passed between nodes in the DAG, have a very natural
  interface.  However, this comes at a cost to compile-time type safety.

*** Developing for Spark
:PROPERTIES:
:ID:       ea9e5ffc-ab08-4294-af05-bd1306f7eca4
:END:

- Spark's monadic expression of transformations over the data similarly feels
  natural in this [[wiki-data-parallelism][processing model]]; this falls in
  line with the idea that RDD's are lazy and maintain transformation lineages,
  rather than actuallized results.

- Spark's use of Scala Tuples can feel awkward in Java, and this awkwardness is
  only exacerbated with the nesting of generic types.  However, this
  awkwardness does come with the benefit of compile-time type checks.

   - Furthermore, until Java 1.8, anonymous functions are inherently awkward.

   - This is probably a non-issue if using Scala.

** Installation / Administration
:PROPERTIES:
:ID:       1308992a-a469-4706-9d5d-5a40aba41cda
:END:

Installation of both Apache Spark and Apache Storm are relatively straight
forward.  Spark may be simpler in some regards, however, since it technically
does not /need/ to be installed to function on YARN or Mesos clusters.  The
Spark application will just require the Spark assembly be present in the
=CLASSPATH=.

Storm, on the other hand, requires ZooKeeper to be properly installed and
running on top of the regular Storm binaries that must be installed.
Furthermore, like ZooKeeper, Storm should run under
[[wiki-process-supervision][supervision]]; installation of a supervisor
service, e.g., [[supervisord][supervisord]], is recommended.

With respect to installation, supporting projects like Apache Kafka are out of
scope and have no impact on the installation of either Storm or Spark.

** Processing Models
:PROPERTIES:
:ID:       4ce1b323-ade1-4ae7-81b9-7ff304359f0d
:END:

Comparing Apache Storm and Apache Spark's Streaming, turns out to be a bit
challenging.  One is a true stream processing engine that can do
micro-batching, the other is a batch processing engine which micro-batches, but
cannot perform streaming in the strictest sense.  Furthermore, the comparison
between streaming and batching isn't exactly a subtle difference, these are
fundamentally different computing ideas.

*** Batch Processing
:PROPERTIES:
:ID:       ace7c720-95c5-46df-a383-29ae914ba66a
:END:

[[wiki-batch-processing][Batch processing]] is the familiar concept of
processing data en masse.  The batch size could be small or very large.  This
is the processing model of the core Spark library.

Batch processing excels at processing /large/ amounts of stable, existing data.
However, it generally incurs a high-latency and is completely unsuitable for
incoming data.

*** Event-Stream Processing
:PROPERTIES:
:ID:       2bd17746-7f94-4091-b017-1adf9d331b76
:END:

[[wiki-event-processing][Stream processing]] is a /one-at-a-time/ processing
model; a datum is processed as it arrives.  The core Storm library follows this
processing model.

Stream processing excels at computing transformations as data are ingested with
sub-second latencies.  However, with stream processing, it is incredibly
difficult to process stable data efficiently.

*** Micro-Batching
:PROPERTIES:
:ID:       0d77d533-83f6-49cd-8444-f4c70ccf742b
:END:

Micro-batching is a special case of batch processing where the batch size is
orders smaller.  Spark Streaming operates in this manner as does the Storm
[[storm-trident-overview][Trident API]].

Micro-batching seems to be a nice mix between batching and streaming.  However,
micro-batching incurs a cost of latency.  If sub-second latency is paramount,
micro-batching will typically not suffice.  On the other hand, micro-batching
trivially gives stateful computation, making
[[wiki-sql-window-function][windowing]] an easy task.

** Fault-Tolerance / Message Guarantees
:PROPERTIES:
:ID:       1615649c-d53b-4aab-a626-36cdfd15c8a7
:END:

As a result of each project's fundamentally different processing models, the
fault-tolerance and message guarantees are handled differently.

*** Delivery Semantics
:PROPERTIES:
:ID:       f1547ad9-ce75-4724-97a1-d6e5c3eb49e8
:END:

Before diving into each project's fault-tolerance and message guarantees, here
are the common delivery semantics:

- At most once: messages may be lost but never redelivered.

- At least once: messages will never be lost but may be redelivered.

- Exactly once: messages are never lost and never redelivered, perfect message
  delivery.

*** Apache Storm
:PROPERTIES:
:ID:       e360b349-6f03-45ca-8f08-f0cc13099d2c
:END:

To provide fault-tolerant messaging, Storm has to keep track of each and every
record.  By default, this is done with at least once delivery semantics.  Storm
can be configured to provide at most once and exactly once.  The delivery
semantics offered by Storm can incur latency costs; if data loss in the stream
is acceptable, at most once delivery will improve performance.

*** Apache Spark Streaming
:PROPERTIES:
:ID:       39ff23b5-d9e3-4ebe-98b9-259f518bc50e
:END:

The resiliency built into Spark RDD's and the micro-batching yields a trivial
mechanism for providing fault-tolerance and message delivery guarantees.  That
is, since Spark Streaming is just small-scale batching, exactly once delivery
is a trivial result for each batch; this is the /only/ delivery semantic
available to Spark.  However some failure scenarios of Spark Streaming degrade
to at least once delivery.

** Applicability
:PROPERTIES:
:ID:       de3b5cc1-4f26-4c32-b268-44f60bcaeaa1
:END:

*** Apache Storm
:PROPERTIES:
:ID:       e702bc5f-35f4-453e-b464-0fa22d47ff01
:END:

Some areas where Storm excels include: near real-time analytics, natural
language processing, data normalization and [[wiki-etl][ETL]] transformations.
It also stands apart from traditional MapReduce and other course-grained
technologies yielding fine-grained transformations allowing very flexible
processing topologies.

*** Apache Spark Streaming
:PROPERTIES:
:ID:       4e9f064f-30b1-4e96-9d17-c6cefb23942b
:END:

Spark has an excellent model for performing iterative machine learning and
interactive analytics.  But Spark also excels in some similar areas of Storm
including near real-time analytics, ingestion.

** Final Thoughts
:PROPERTIES:
:ID:       138afe07-ca54-4071-8970-a6a295867e4c
:END:

Generally, the requirements will dictate the choice.  However, here are some
major points to consider when choosing the right tool:

- Latency: Is the performance of the streaming application paramount?  Storm
  can give sub-second latency much more easily and with less restrictions than
  Spark Streaming.

- Development Cost: Is it desired to have similar code bases for batch
  processing /and/ stream processing? With Spark, batching and streaming are
  /very/ similar.  Storm, however, departs dramatically from the MapReduce
  paradigm.

- Message Delivery Guarantees: Is there high importance on processing /every/
  single record, or is some nominal amount of data loss acceptable?
  Disregarding everything else, Spark trivially yields perfect, exactly once
  message delivery.  Storm can provide all three delivery semantics, but getting
  perfect exactly once message delivery requires more effort to properyly
  achieve.

- Process Fault Tolerance: Is high-availability of primary concern?  Both
  systems actually handle fault-tolerance of this kind really well and in
  relatively similar ways.

   - Production Storm clusters will run Storm processes under
     [[wiki-process-supervision][supervision]]; if a process fails, the
     supervisor process will restart it automatically.  State management is
     handled through ZooKeeper.  Processes restarting will reread the state
     from ZooKeeper on an attempt to rejoin the cluster.

   - Spark handles restarting workers via the resource manager: YARN, Mesos, or
     its standalone manager.  Spark's standalone resource manager handles master
     node failure with standby-masters and ZooKeeper.  Or, this can be handled
     more primatively with just local filesystem state checkpointing, not
     typically recommended for production environments.

Both Apache Spark Streaming and Apache Storm are great solutions that solve the
streaming ingestion and transformation problem.  Either system can be a great
choice for part of an analytics stack.  Choosing the right one is simply a
matter of answering the above questions.

** References
:PROPERTIES:
:ID:       3819ddaf-8bb9-488d-a7dc-3cf4b02e6e44
:END:

-  [[storm][Apache Storm Home Page]]

-  [[spark][Apache Spark]]

-  [[storm-post][Real Time Streaming with Apache Storm and Apache Kafka]]

-  [[spark-post][Real Time Streaming with Apache Spark (Streaming)]]

-  [[kafka][Apache Kafka]]

-  [[wiki-data-parallelism][Wikipedia: Data Parallelism]]

-  [[wiki-task-parallelism][Wikipedia: Task Parallelism]]

-  [[zookeeper][Apache ZooKeeper]]

-  [[storm-yarn][Yahoo! Storm-YARN]]

-  [[horton-storm-yarn][Hortonworks: Storm on YARN]]

-  [[mesos][Apache Mesos]]

-  [[mesos-run-storm][Run Storm on Mesos]]

-  [[marathon][Marathon]]

-  [[xinhstechblog-storm-spark][Storm vs Spark Streaming: Side by Side]]

-  [[ptgoetz-storm-spark][Storm vs Spark Streaming (Slideshare)]]
